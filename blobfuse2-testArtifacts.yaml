variables:
  tags: 'fuse3'
  depends: 'fuse3'
  project: 'BlobFuse'
  pipelineId: 96

stages:
- stage: TestArtifacts
  jobs:
  - job: Set_0
    timeoutInMinutes: 120
    strategy:
      matrix:
        Ubuntu-22:
          agentName: "blobfuse-ubuntu22"
          vmImage: 'Ubuntu-22.04'
          fuse-version: 'fuse3'
          fuselib: 'libfuse3-dev'
          tags: 'fuse3'
          container: 'test-cnt-ubn-22'
    pool:
      vmImage: $(vmImage)

    variables:
      - group: NightlyBlobFuse
      - name: root_dir
        value: '$(System.DefaultWorkingDirectory)'
      - name: work_dir
        value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
      - name: mount_dir
        value: '$(System.DefaultWorkingDirectory)/fusetmp'
      - name: temp_dir
        value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

    steps:
    - checkout: none

    - script: |
        git clone https://github.com/Azure/azure-storage-fuse
      displayName: 'Checkout Code'
      workingDirectory: $(root_dir)

    - script: |
        git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
      displayName: 'Checkout Branch'
      workingDirectory: $(root_dir)/azure-storage-fuse

    # Custom script to install Go-lang
    - task: ShellScript@2
      inputs:
        scriptPath: "$(work_dir)/go_installer.sh"
        args: "$(root_dir)/"
      displayName: "GoTool Custom Setup"
    
    # get glibc version with which build is done
    - script: |
        ldd --version
        echo $(Build.BuildId)
        mkdir -p $(root_dir)/blobfuse2-linux-unsigned
      displayName: "GLIBC Version"

    # Download artifacts from a specific pipeline.
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'specific'
        artifactName: 'blobfuse2-linux-unsigned'
        project: $(project)
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        targetPath: '$(root_dir)/blobfuse2-linux-unsigned'
        definition: $(pipelineId)
        allowFailedBuilds: true

    - script: |
        ls -l
      displayName: 'List Downloaded Package'
      workingDirectory: $(root_dir)/blobfuse2-linux-unsigned

    - script: |
        for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)./-$(vmImage).}"; done;
        cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
      displayName: "Rename Package"  
      workingDirectory: $(root_dir)/blobfuse2-linux-unsigned      
      
    - script: |
        sudo dpkg --info blobfuse2*.deb
        sudo dpkg -i blobfuse2*.deb
        sudo apt-get install $(fuse-version) build-essential -y
      displayName: 'Install Package'
      workingDirectory: $(Build.ArtifactStagingDirectory)

    - template: 'azure-pipeline-templates/release-distro-tests.yml'
      parameters:
        root_dir: $(root_dir)
        work_dir: $(work_dir)
        mount_dir: $(mount_dir)
        temp_dir: $(temp_dir)
        container: $(container)

    # Create container for blobfuse and publish it
    - script: |
        sudo apt-get install $(tags) $(fuselib) -y
        chmod 777 *.sh
        ./dockerinstall.sh
        ./buildcontainer.sh Dockerfile x86_64
        ./publishcontainer.sh $(AZTEST_DOCKER_REG_USER)  $(AZTEST_DOCKER_REG_PWD) x86_64
        ./buildcontainer.sh DockerfileMariner mariner-x86_64
        ./publishcontainer.sh $(AZTEST_DOCKER_REG_USER)  $(AZTEST_DOCKER_REG_PWD) mariner-x86_64
      displayName: "Create and publish container"
      workingDirectory: $(work_dir)/docker

    # publishing the artifacts generated
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'blobfuse2'
      displayName: 'Publish Artifacts'    